2、Voliet关键字

	2.1、保证可见性
	2.2、不保证原子性
	2.3、禁止指令重排
	2.4、DCL（Double check lock双端检索机制）版单例模式

		DCL（双端检锁）机制不一定线程安全，原因是有指令重排序的存在，加入volatile可以禁止指令重排。原因在于某一个线程执行到第一个检测，读取到的instance不为null时，
		instance的引用对象可能没有完成初始化。

		高并发环境下，完整的双端检索机制
		public class SingleInstanceDemo {
			private SingleInstanceDemo() {
				System.out.println("创建实例");
			}

			//禁止指令重排
			private static volatile SingleInstanceDemo instance=null;

			public static SingleInstanceDemo getInstance() {
				if (instance == null) {
					synchronized (SingleInstanceDemo.class) {
						if (instance == null) {
							instance = new SingleInstanceDemo();
						}
					}
				}
				return instance;
			}

			public static void main(String[] args) {
				for (int i = 0; i < 10000; i++) {
					new Thread(() -> {
						SingleInstanceDemo.getInstance();
					}).start();
				}
			}
		}

3、CAS(比较并交换)-->compareAndSet

		CAS的全称是Compare-And-Swap，它是一条CPU并发原语。它的功能是判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子的。

	3.2、底层原理 自选锁，unsafe类

		1.Unsafe是CAS的核心类，由于Java方法无法直接访问底层系统，需要通过本地（native）方法来访问，Unsafe相当于一个后门，基于该类可以直接操作特定内存的数据。

		2.Unsafe类存在于sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存，因为Java中CAS操作的执行依赖于Unsafe类的方法。注意Unsafe类中的所有方法都是
		native修饰的，也就是说Unsafe类中的方法都直接调用操作系统底层资源执行相应任务。

	3.3、CAS的缺点

		1、循环时间长开销大 do-while

		   如果CAS失败，会一直进行尝试。如果CAS长时间一直不成功，可能会给CPU带来很大的开销。

		2、只能保证一个共享变量的原子操作

			当对一个共享变量执行操作时，我们只能使用循环CAS的方式来保证原子操作，但是，对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁来保证原子性。

		3、引出来ABA问题？？？

			ABA+新增一种机制-->版本号（类似于时间戳）

			ABA问题的解决  AtomicStampedReference 主要维护包含一个对象引用以及一个可以自动更新的整数"stamp"的pair对象来解决ABA问题。stamp美[stæmp]印; 章; 戳; 印记; 戳记;

4、ArrayList线程不安全

	1、故障现象

          java.util.ConcurrentModificationException

	2、解决方案

        4.2.1 new Vector<>();
        4.2.2 Collections.synchronizedList(new ArrayList<>());
        4.2.3 new CopyOnWriteArrayList<>() 写时复制
			CopyOnWrite容器即写时复制的容器。往一个容器添加元素的时候，不直接往当前容器Object[]添加，而是先将当前object[]进行Copy，复制出一个新的容器
			Object[] newElements，然后新的容器Object[] newElements里添加元素，添加完元素之后，再将原容器的引用指向新的容器setArray（newElements）;
			这样做的好处是可以对copyonwrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以copyonwrite容器也是一种读写分离的思想，读和写不同
			的容器。

5、HashSet线程不安全

	1、故障现象

          java.util.ConcurrentModificationException

	2、解决方案

		4.2.3 new CopyOnWriteArraySet<>() 写时复制

6、Map线程不安全

	1、故障现象

          java.util.ConcurrentModificationException

	2、解决方案

		4.2.3 new ConcurrentHashMap<>();

7、java锁（公平锁/非公平锁/可重入锁/递归锁/自旋锁）

	7.1、平锁和非公平锁

		并发包中ReentrantLock的创建可以指定构造函数的boolean类型来得到公平锁或非公平锁，默认是非公平锁。非公平锁的优点在于吞吐量比公平锁大。
		Lock lock = new ReentrantLock(true);

	7.2、可重入锁（又名递归锁）

		指的是同一个线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。也就是说，
		线程可以进入任何一个它已经拥有的锁所有同步着的代码块。

		ReentrantLock/Synchronized就是一个典型的可重入锁，默认是非公平锁

		ReentrantLock 锁可以加多把，但是必须成对出现，否则会卡死（编译通过，运行卡死）。

	7.3、自旋锁

		指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下切换的消耗，缺点是循环会消耗CPU。

		public class SpinLockDemo {
			AtomicReference<Thread> atomicReference = new AtomicReference<>();

			public void myLock(){
				Thread thread = Thread.currentThread();
				System.out.println(Thread.currentThread().getName()+"\t come in ");
				while(!atomicReference.compareAndSet(null,thread)){

				}
			}

			public void myUnLock(){
				Thread thread = Thread.currentThread();
				atomicReference.compareAndSet(thread,null);
				System.out.println(Thread.currentThread().getName()+"\t invoked myUnLock()");
			}

			public static void main(String[] args){
		//        原子引用线程
				SpinLockDemo spinLockDemo = new SpinLockDemo();
				new Thread(()->{
					spinLockDemo.myLock();
					try{ TimeUnit.SECONDS.sleep(5); } catch (InterruptedException e) {e.printStackTrace();}
				},"AA").start();

				try{ TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) {e.printStackTrace();}

				new Thread(()->{
					spinLockDemo.myLock();
					try{ TimeUnit.SECONDS.sleep(5); } catch (InterruptedException e) {e.printStackTrace();}
				},"BB").start();
			}
		}

	7.4、独占锁（写锁）、共享锁（读锁）、互斥锁

		多个线程同时读一个资源类没有问题，所以为了满足并发量，读取共享资源应该可以同时进行。但是写共享 资源只能有一个线程。 读--多个线程共享，写--写不能共存，
		读-写不能共存 ReentrantReadWriteLock 写操作：原子+独占，整个过程必须是一个完整的统一体，中间不许被分割，被打断。

		class MyCache{
			private volatile Map<String,Object> map = new HashMap<>();//保证可见性
		//    private Lock lock = new ReentrantLock();
			private ReentrantReadWriteLock reentrantReadWriteLock = new ReentrantReadWriteLock();
			public void put(String key,Object value){
				reentrantReadWriteLock.writeLock().lock();
				try{
					System.out.println(Thread.currentThread().getName()+"\t 正在写入："+key);
					try{
						TimeUnit.MILLISECONDS.sleep(300);
					} catch (InterruptedException e) {e.printStackTrace();}
					map.put(key,value);
					System.out.println(Thread.currentThread().getName()+"\t 写入完成");
				}catch (Exception e){
					e.printStackTrace();
				}finally {
					reentrantReadWriteLock.writeLock().unlock();
				}
			}

			public void get(String key){
				reentrantReadWriteLock.readLock().lock();
				try {
					System.out.println(Thread.currentThread().getName()+"\t 正在读取："+key);
					try{
						TimeUnit.MILLISECONDS.sleep(300);
					} catch (InterruptedException e) {e.printStackTrace();}
					Object result = map.get(key);
					System.out.println(Thread.currentThread().getName()+"\t 读取完成"+result);
				}catch (Exception e){
					e.printStackTrace();
				}finally {
					reentrantReadWriteLock.readLock().unlock();
				}

			}

		}

		public class ReadWriteLockDemo {
			public static void main(String[] args){
				MyCache myCache = new MyCache();
				for(int i=1;i<=5;i++){
					final int tempInt = i;
					new Thread(()->{
						myCache.put(tempInt+"",tempInt+"");
					},String.valueOf(i)).start();
				}

				for(int i=1;i<=5;i++){
					final int tempInt = i;
					new Thread(()->{
						myCache.get(tempInt+"");
					},String.valueOf(i)).start();
				}
			}
		}

8、CountDownLatch/CyclicBarrier/Semaphore

	8.1、CountDownLatch

		让一些线程阻塞直到另一个线程完成一系列操作后才被唤醒CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，调用线程会被阻塞。其他线程调用
		countDown方法会将计数器减1（调用CountDown方法的线程不会阻塞），当计数器的值变为0时，因调用await方法被阻塞的线程会被唤醒，继续执行。

		public class CountDownLatch {
		public static void main(String[] args) throws Exception{
		//构造设置计数器值为6
				java.util.concurrent.CountDownLatch countDownLatch = new java.util.concurrent.CountDownLatch(6);

				for(int i=1;i<=6;i++){
					new Thread(()->{
						System.out.println(Thread.currentThread().getName()+"\t 上完自习，离开教室");
		//减6次
						countDownLatch.countDown();
					},String.valueOf(i)).start();
				}
			   //计数器为0时开始执行
				countDownLatch.await();
				System.out.println(Thread.currentThread().getName()+"\t *****班长最后关门走人");
			}
		}

	8.2、CyclicBarrier
		CyslicBarrier的字面意思是可循环（Cyclic）使用的屏障（Barrier）。它要做的事情是，让一组线程到达屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达
		屏障时，屏障才会打开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await（）方法。
		public class CyclicBarrierDemo {
			public static void main(String[] args){
				CyclicBarrier cyclicBarrier = new CyclicBarrier(7,()->{System.out.println("召唤神龙");});

				for(int i=1;i<=7;i++){
					final int tempInt = i;
					new Thread(()->{
						System.out.println(Thread.currentThread().getName()+"\t 收集到第："+tempInt+"龙珠");
						try{
							cyclicBarrier.await();
						} catch (InterruptedException e){
							e.printStackTrace();
						} catch (BrokenBarrierException e){
							e.printStackTrace();
						}
					},String.valueOf(i)).start();
				}
			}
		}
		8.2.1、CountDownLatch与CyclicBarrier的区别
				CountDownLatch：线程安全，内部维护一计数器，每执行一次downCount方法，计数器减一，await方法会阻塞线程执行，直到计数器为0时，才会继续await方法以后的代码。
				CyclicBarrier：线程安全，内部维护一计数器，每执行一次await方法，计数器减一，await方法会阻塞当前所在线程，直到计数器为0时，会唤醒同一个Condition上所有线
				程，继续执行。new CyclicBarrier(3,new IntegrationData())，当使用两个参数的构造时，需要传一个线程，此时，计数器被减至0时，会执行这个线程，当线程执行完毕
				之后，才会唤醒同一个Condition上所有线程继续执行

	8.3、Semaphore

		信号量主要用于两个目的，一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。new Semaphore(6) 表示初始化了 6个通路， semaphore.acquire(2)
		表示每次线程进入将会占用2个通路，semaphore.release(2) 运行时表示归还2个通路。没有通路，则线程就无法进入代码块。

		public class SemaphoreDemo {
			public static void main(String[] args){
				Semaphore semaphore = new Semaphore(3);  //模拟3个车位,同一时刻只能有三量车进入
				for(int i=1;i<=6;i++){  //模拟6部车
					new Thread(()->{
						try{
							semaphore.acquire();
							System.out.println(Thread.currentThread().getName()+"\t抢到车位");
							try{
								TimeUnit.SECONDS.sleep(3);
							} catch (InterruptedException e) {e.printStackTrace();}
							System.out.println(Thread.currentThread().getName()+"\t停车3秒后离开车位");
						} catch (InterruptedException e){
							e.printStackTrace();
						} finally {
							semaphore.release();
						}
					},String.valueOf(i)).start();
				}
			}
		}

9、阻塞队列
	当阻塞队列是空时，从队列中获取元素的操作将被阻塞。当阻塞队列是满时，往队列里添加元素的操作将被阻塞。

	9.1、 ArrayBlockingQueue:是一个基于数组结构的有界阻塞队列，此队列按FIFO原则对元素进行排序
	9.2、 LinkedBlockingQueue:是一个基于链表结构的阻塞队列，此队列按FIFO排序元素，吞吐量高于ArrayBlockingQueue
	9.3、 SynchronousQueue：一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移出操作，否则插入操作一直处于阻塞状态，吞吐量通常要高。每一个put操
		 作必须要等待一个take操作， 否则不能继续添加元素，反之亦然。

	9.6、线程通信
		9.6.1、普通版生产者、消费者
		class ShareData{  //资源类
			private int number = 0;
			private Lock lock = new ReentrantLock();
			private Condition condition = lock.newCondition();
			public void increment() throws Exception{
				lock.lock();
				try{
					//        1.判断
					while(number !=0){
		//            等待，不能生产
						condition.await();
					}
					//2.干活
					number++;
					System.out.println(Thread.currentThread().getName()+"\t"+number);
					//3.通知唤醒
					condition.signalAll();
				} catch (Exception e){
					e.printStackTrace();
				}finally {
					lock.unlock();
				}
			}

			public void decrement() throws Exception{
				lock.lock();
				try{
					//        1.判断
					while(number ==0){
		//            等待，不能生产
						condition.await();
					}
					//2.干活
					number--;
					System.out.println(Thread.currentThread().getName()+"\t"+number);
					//3.通知唤醒
					condition.signalAll();
				} catch (Exception e){
					e.printStackTrace();
				}finally {
					lock.unlock();
				}
			}
		}
		/*
		* 题目：一个初始值为0的变量，两个线程对其交替操作，一个加1，一个减1，来5轮
		*
		* 1.线程操作资源类
		* 2.判断 干活 通知
		* 3.防止虚假唤醒机制
		* */
		public class ProdConsumer_TraditionDemo {
			public static void main(String[] args){
				ShareData shareData = new ShareData();
				new Thread(()->{
					for(int i=1;i<=5;i++){
						try {
							shareData.increment();
						}catch (Exception e){
							e.printStackTrace();
						}
					}
				},"AAA").start();
				new Thread(()->{
					for(int i=1;i<=5;i++){
						try {
							shareData.decrement();
						}catch (Exception e){
							e.printStackTrace();
						}
					}
				},"BBB").start();
			}
		}
	9.6.2、Synchronized和lock区别

			9.6.2.1、相同点：

				它们都是加锁方式同步，而且都是阻塞式的同步，也就是说当如果一个线程获得了对象锁，进入了同步块，其他访问该同步块的线程都必须阻塞在同步块外面等待，
				而进行线程阻塞和唤醒的代价是比较高的（操作系统需要在用户态与内核态之间来回切换，代价很高，不过可以通过对锁优化进行改善）

			9.6.2.2、区别：

				9.6.2.2.1、 API层面：
					1、Synchronized：是属于jvm层面的关键字，monitorenter(底层通过monitor对象来完成，其实wait/notify等方法也依赖于monitor对象只有在同步块或方法中才能调
					用wait/notify等方法)。synchronized既可以修饰方法，也可以修饰代码块。

					2、lock：它是JDK 1.5之后提供的API层面的互斥锁，需要lock()和unlock()方法配合try/finally语句块来完成。是具体类（java.util.concurrent），是api层面的锁

				9.6.2.2.2、使用方法：
					Synchronized： 不需要用户去手动释放，当Synchronized执行完系统的代码会自动释放对象锁的占用
					ReentrantLock：需要用户去手动释放锁，若没有释放锁，则会造成死锁现象。

				9.6.2.2.3、等待是否可中断
					Synchronized：不可中断，是Java提供的原子性内置锁机制。内部锁扮演了互斥锁（mutual exclusion lock ，mutex）的角色，一个线程引用锁的时候，别的线程阻
					塞等待。除非抛出异常或程序正常运行完成
					ReentrantLock：可以中断：设置超时方法：1、tryLock(long time, TimeUnit unit)
					2、lockInterruptibly()；放代码块中，调用 t1.interrupt();方法可打断线程

				9.6.2.2.4、加锁是否公平
					Synchronized 非公平锁
					ReentrantLock 都可以，默认非公平锁。构造方法传入boolean 值，true公平（顺序排队，任何时候都不能插队），false 非公平（可以插队）

				9.6.2.2.5、锁绑定多个条件
					Synchronized 中，锁对象的wait()和notify()或notifyAll()方法可以实现一个隐含的条件。但如果要和多于一个的条件关联的时候，就不得不额外添加一个锁。随机唤
					醒一个或全部线程。
					ReentrantLock可以同时绑定多个Condition对象，只需多次调用newCondition方法，可以实现精确唤醒

				9.6.2.2.6、多个Condition示例演示
				/*
				* 题目：多线程之间按顺序调用，实现A->B->C三个线程启动，要求如下：
				* A打印5次，B打印10次，C打印15次
				* 紧接着
				* A打印5次，B打印10次，C打印15次
				* 。。。。。
				* 打印10轮
				* */
				class ShareResource{
					private int number = 1;//A:1.B:2,C:3
					private Lock lock = new ReentrantLock();
					private Condition c1 = lock.newCondition();
					private Condition c2 = lock.newCondition();
					private Condition c3 = lock.newCondition();

					public void print5(){
						lock.lock();
						try{
							//1判断
							while(number != 1){
								c1.await();
							}
							//2干活
							for(int i=1;i<=5;i++){
								System.out.println(Thread.currentThread().getName()+"\t"+i);
							}
							//3通知
							number = 2;
							c2.signal();
						}catch (Exception e){
							e.printStackTrace();
						}finally {
							lock.unlock();
						}
					}

					public void print10(){
						lock.lock();
						try{
							//1判断
							while(number != 2){
								c2.await();
							}
							//2干活
							for(int i=1;i<=10;i++){
								System.out.println(Thread.currentThread().getName()+"\t"+i);
							}
							//3通知
							number = 3;
							c3.signal();
						}catch (Exception e){
							e.printStackTrace();
						}finally {
							lock.unlock();
						}
					}

					public void print15(){
						lock.lock();
						try{
							//1判断
							while(number != 3){
								c3.await();
							}
							//2干活
							for(int i=1;i<=15;i++){
								System.out.println(Thread.currentThread().getName()+"\t"+i);
							}
							//3通知
							number = 1;
							c1.signal();
						}catch (Exception e){
							e.printStackTrace();
						}finally {
							lock.unlock();
						}
					}
				}

				public class SyncAndReentrantLockDemo {
					public static void main(String[] args){
						ShareResource shareResource = new ShareResource();

						new Thread(()->{
							for(int i=1;i<=10;i++){
								shareResource.print5();
							}
						},"A").start();
						new Thread(()->{
							for(int i=1;i<=10;i++){
								shareResource.print10();
							}
						},"B").start();
						new Thread(()->{
							for(int i=1;i<=10;i++){
								shareResource.print15();
							}
						},"C").start();
					}
				}

	9.6.2.2.7、生产者消费者示例演示

		class MyResource{
			private volatile boolean FLAG = true;//默认开启，进行生产+消费
			private AtomicInteger atomicInteger = new AtomicInteger();
			BlockingQueue<String> blockingQueue = null;
			public MyResource(BlockingQueue<String> blockingQueue) {
				this.blockingQueue = blockingQueue;
				System.out.println(blockingQueue.getClass().getName());
			}
			public void myProd() throws Exception{
				String data = null;
				boolean retValue;
				while(FLAG){
					data = atomicInteger.incrementAndGet()+"";
					retValue = blockingQueue.offer(data,2L, TimeUnit.SECONDS);
					if(retValue){
						System.out.println(Thread.currentThread().getName()+"\t插入队列"+data+"成功");
					}else{
						System.out.println(Thread.currentThread().getName()+"\t插入队列"+data+"失败");
					}
					TimeUnit.SECONDS.sleep(1);
				}
				System.out.println(Thread.currentThread().getName()+"\t生产停止");
			}
			public void myConsumer() throws Exception{
				String result = null;
				while(FLAG){
					result = blockingQueue.poll(2L,TimeUnit.SECONDS);
					if(null==result || result.equalsIgnoreCase("")){
						FLAG = false;
						System.out.println(Thread.currentThread().getName()+"\t 超过2秒，消费退出");
						System.out.println();
						System.out.println();
						return;
					}
					System.out.println(Thread.currentThread().getName()+"\t消费队列"+result+"成功");
				}
			}
			public void stop() throws Exception{
				this.FLAG = false;
			}
		}
		/*
		* volatile/CAS/atomicInteger/BlockQueue/线程交互/原子引用
		* */
		public class ProdConsumer_BlockQueueDemo {
			public static void main(String[] args) throws Exception{
				MyResource myResource = new MyResource(new ArrayBlockingQueue<>(10));
				new Thread(()->{
					System.out.println(Thread.currentThread().getName()+"\t 生产线程启动");
					System.out.println();
					System.out.println();
					try{
						myResource.myProd();
					}catch (Exception e){
						e.printStackTrace();
					}
				},"Prod").start();

				new Thread(()->{
					System.out.println(Thread.currentThread().getName()+"\t 消费线程启动");
					try{
						myResource.myConsumer();
					}catch (Exception e){
						e.printStackTrace();
					}
				},"Consumer").start();
				try{TimeUnit.SECONDS.sleep(5);}catch (InterruptedException e){e.printStackTrace();}
				System.out.println();
				System.out.println();
				System.out.println();
				System.out.println("5秒钟到，main停止");
				myResource.stop();
			}
		}

10、多线程方式之Callable
		Callable位于java.util.concurrent包下，它也是一个接口，在它里面也只声明了一个方法，只不过这个方法叫做call()：

		class MyThread implements Runnable{
					public void run(){
						}
					}*/

					class MyThread implements Callable<Integer> {
						public Integer call() throws Exception{
							System.out.println(".........come in callable");
							return 1024;
						}
					}
					public class CallableDemo {
						public static void main(String[] args) throws InterruptedException, ExecutionException {
							FutureTask<Integer> futureTask = new FutureTask<>(new MyThread());
							Thread t1 = new Thread(futureTask,"AA");
							t1.start();
							int r1 = 100;
							int r2 = futureTask.get();//要求获得Callable线程的计算结果，如果没有计算完成就要强求，会导致阻塞，直到计算完成，建议放在最后
							System.out.println(".....result"+r1+r2);
						}
				}

		和明显能看到区别：
			1.Callable能接受一个泛型，然后在call方法中返回一个这个类型的值。而Runnable的run方法没有返回值
			2.Callable的call方法可以抛出异常，而Runnable的run方法不会抛出异常。

11、线程池

	11.1、线程池说明及优势

		线程池主要是控制运行线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。

		主要特点是：线程复用、控制最大并发数、管理线程。

		第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。
		第二：提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。
		第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。

	11.2、线程池的使用

		11.2.1、架构说明
			Java中的线程池是通过Executor框架实现的，该框架中用到了Executor，Executors，ExecutorService，ThreadPoolExecutor这几个类。

		11.2.2、方法介绍
			1、Executors.newScheduledThreadPool()
			2、java8新出 Executors.newWorkStealingPool(int)  java8新增，使用目前机器上可用的处理器作为它的并行级别、
			3、Executors.newFixedThreadPool(int)

				主要特点：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。
				newFixedThreadPool创建的线程池corePoolSize和maximumPoolSize值是相等的，它使用的LinkedBlockingQueue。
				使用场景：执行长期的任务，性能好很多
			4、Executors.newSingleThreadExecutor()

				主要特点：创建一个单线程化的线程池，它只会唯一的工作线程来执行任务，保证所有任务按照指定顺序执行。newSingleThread将corePoolSize和maximumPoolSize都设置
				为1，它使用的是LinkedBlockingQueue。
				使用场景：一个任务一个任务执行的场景

			5、Executors.newCachedThreadPool()

				主要特点：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。
				newCachedThreadPool将corePoolSize设置为0，将maximumPoolSize设置为Integer.MAX_VALUE，使用的SynchronousQueue，也就是说来了任务就创建线程运行，
				当线程空闲超过60秒，就销毁线程。
				使用场景：执行很多短期异步的小程序或者负载较轻的服务

		11.2.3、重要参数

		   1、corePoolSize：线程池中的常驻核心线程数。在创建线程池后，当有请求任务来之后，就会安排池中的线程去执行请求任务，近似理解为今日当值线程。线程池中的线程数目到达corePoolSize后，就会把到达的任务放到缓存队列当中。
		   2、maximumPoolSize：线程池能够容纳同时执行的最大线程数，此值必须大于等于1。能开放的窗口上限
		   3、keepAliveTime：多余的空闲线程的存活时间。当前线程池数量超过corePoolSize时，当空闲时间达到keepAliveTime值时，多余空闲线程会被销毁直到只剩下corePoolSize个线程为止。默认情况下：只有当线程池中的线程数大于corePoolSize时keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize。 业务量开始变小了,规定的时间内，业务量仍然没有上来，扩容的窗口会关闭，只剩下值班区
		   4、unit: keepAliveTime的单位
		   5、workQueue：任务队列，被提交但尚未被执行的任务。阻塞队列，候客区。候补队列满了，扩容至maximumPoolSize
		   6、threadFactory：表示生成线程池中工作线程的线程工厂，用于创建线程一般用默认的即可。Logo统一的东西
		   7、handler：拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数。全部窗口和候客区已满，拒绝进入

		11.2.4、工作原理
		    1.在创建了线程池后，等待提交过来的任务请求。
		   2.当调用execute（）方法添加一个请求任务时，线程池会做如下判断：
			   2.1如果正在运行的线程数量小于corePoolSize，那么马上创建马上创建线程运行这个任务。
			   2.2如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列。
			   2.3如果这个时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务。
			   2.4如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。
		  3.当一个线程完成任务时，它会从队列中取下一个任务来执行。
		  4.当一个线程无事可做超过一定的时间（keepAlilveTime）时，线程池会判断：如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。所以线程池的所有任务
			完成后它最终会收缩到corePoolSize的大小。

			public class MyThreadPoolDemo {
				public static void main(String[] args){
					ExecutorService threadPool = new ThreadPoolExecutor(2,
							5,
							1L,
							TimeUnit.SECONDS,
							new LinkedBlockingQueue<>(3),
							Executors.defaultThreadFactory(),
							new ThreadPoolExecutor.DiscardPolicy());

					try{
						for(int i=1;i<=11;i++){
							threadPool.execute(()->{
								System.out.println(Thread.currentThread().getName()+"\t 办理业务");
							});
						}
					}catch (Exception e){
						e.printStackTrace();
					}finally {
						threadPool.shutdown();
					}
			}

	11.2.7、合理配置线程

		1、CPU密集型 CPU核数+1个线程的线程的线程池
		2、IO密集型  CPU核数*2

	11.2.8、死锁编程及定位分析

		1、死锁是指两个或者两个以上的进程在执行过程中，因抢夺资源而造成的一种互相等待的现象，若无外力干涉它们将都无法推进下去，如果系统资源充足，进程的资源请
		求都能够得到满足，死锁出现的可能性也就很低，否则就会因争夺有限的资源而陷入死锁。

		class HoldLockThread implements Runnable{
			private String lockA;
			private String lockB;
			public HoldLockThread(String lockA,String lockB){
				this.lockA = lockA;
				this.lockB = lockB;
			}

			public void run(){
				synchronized (lockA){
					System.out.println(Thread.currentThread().getName()+"\t自己持有："+lockA+"\t尝试获得："+lockB);
					//暂停一下
					try{ TimeUnit.SECONDS.sleep(2); }catch (InterruptedException e){e.printStackTrace();}

					synchronized (lockB){
						System.out.println(Thread.currentThread().getName()+"\t自己持有："+lockB+"\t尝试获得："+lockA);
					}
				}
			}
		}
		public class DeadLockDemo {
			public static void main(String[] args){
				String lockA = "lockA";
				String lockB = "lockB";
				new Thread(new HoldLockThread(lockA,lockB),"ThreadAAA").start();
				new Thread(new HoldLockThread(lockB,lockA),"ThreadBBB").start();
			}
		}

12、JVM
linux查杀java服务

	1、查看端口：	ps -ef | grep 8010

	2、杀死进程：   kill -9 pid 174808


windows查杀java服务

	1、查看端口：	netstat -aon|findstr "8010"

	2、杀死进程：   taskkill /pid 8952 -t -f


	3、获取Java程序的进程，可以直接使用 jps 命令来直接查

		-q：只输出进程 ID
		-m：输出传入 main 方法的参数
		-l：输出完全的包名，应用主类名，jar的完全路径名
		-v：输出jvm参数
		-V：输出通过flag文件传递到JVM中的参数


	4、查看当前运行程序的配置

		4.1、全局性查看

			4.1.1、查出进程 jps -l

			4.1.2、查看当前运行程序的配置   jinfo -flags  190108

			4.1.3、查看某一项配置			jinfo -flag MetaspaceSize 190108(查看元空间打大小)

			4.1.4、查看使用的垃圾收集器：   jinfo -flag UseParallelGC  190108

										    -XX:+UseParallelGC  --> 返回+是正在采用的


		4.2、细致查看： 		公式：java -XX：+PrintFlagsInitial (-version)

			4.2.1、查看初始默认配置 		java -XX:PrintFlagsInitial

			4.2.2、查看修改后的值			java -XX:PrintFlagsFinal      =(没修改)  :=(修改)

			4.2.2、查看启动时配置的参数 	java -XX:+PrintCommandLineFlags  (-version)    //查看垃圾回收器比较方便

	5、jvm参数配置






	6、清屏 cls


	7、打印GC回收细节java -XX:+PrintGCDetails

		[名称]回收前占用空间-->回收后占用空间（该区占用内存总大小）


jvm常用命令

	1、参数配置

		1、Boolean开启类型  公式： -XX：+或者-某个属性值 +表示开启  -表示关闭    示例：-XX:+PrintCommandLineFlags

		1、KV设值类型	    公式： XX:属性key=属性值value					     示例：-XX::MetaspaceSize=1024m

	2、常用命令：
		1、-Xms：等价于-XX:InitialHeapSize   堆初始化值 1/64

		2、-Xmx：等价于-XX：MaxHeapSize      堆最大值(默认四分之一内存)  1/4

		3、-Xss：虚拟栈内存(默认1024k)

		4、-XX:MaxTenuringThreshold=15	 //Young区对象的最大任期阈值，即可经历minor gc的次数，超过该次数的对象直接迁移到Old区，默认值为15。

		5、-XX:MetaspaceSize=1024m		//元空间大小

		6、-XX：+PrintFlagsInitial

		7、-xx:SurvivorRatio=8  eden:s0：s1  8:1:1

		8、-xx:NewRatio=2 新生代占1，老年代占2，年轻代占整个堆空间的1/3

	3、使用的JDK命令行工具：

		1、javac：编译Java程序

		2、java：运行Java程序

		3、jps：虚拟机进程状况工具(-q：输出本地虚拟机唯一id     -l：输出主类全名)

		4、jstat：虚拟机统计信息监视工具(-gc：监视Java堆状况，包括Eden区、两个survivor区、老年代、永久代；)

		5、jinfo：Java配置信息工具(-flag：查看系统参数默认值)

		6、jmap：Java内存映像工具，-dump用于生成堆转储快照

		7、jhat：虚拟机堆转储快照分析工具，一般不用

		8、jstack：Java堆栈跟踪工具，用于生成虚拟机当前时刻的线程快照

13、强引用、软引用、弱引用、虚引用

	13.2、强引用
		当内存不足，JVM开始垃圾回收，对于强引用的对象，就算是出现了OOM也不会对该对象进行回收，死都不收。

		public class StrongReferenceDemo {
			public static void main(String[] args){
				Object obj1 = new Object();//这样定义默认的就是强引用
				Object obj2 = obj1;//obj2引用赋值
				obj1 = null;
				System.gc();
				System.out.println(obj2);
			}
		}

	13.3、软引用  SoftReference<T>
		软引用通常用在对内存敏感的程序中，比如高速缓存就有用到软引用，内存够用的时候就保留，不够用就回收。

	13.4、弱引用  WeakReference<T>
		对于弱引用来说，只要垃圾回收机制一运行，不管JVM的内存空间是否足够，都会回收该对象占用的内存。
		public class WeakReferenceDemo {
			public static void main(String[] args){
				Object o1 = new Object();
				WeakReference<Object> weakReference = new WeakReference<>(o1);
				System.out.println(o1);
				System.out.println(weakReference.get());

				o1 = null;
				System.gc();
				System.out.println("...............");

				System.out.println(o1);
				System.out.println(weakReference.get());
			}
		}

		13.4.1、weakHashMap
			WeakHashMap与HashMap 最大的不同之处在于，WeakHashMap的key是 “弱键”（weak keys），即 当一个key不再正常使用时，key对应的key-value pair将自动从
			WeakHashMap中删除，在这种情况下，即使key对应的key-value pair的存在，这个key依然会被GC回收，如此以来，它对应的key-value pair也就被从map中有效地删除了

			public class WeakHashMapDemo {
				public static void main(String[] args){
					myHashMap();
					System.out.println("========");
					myWeakHashMap();
				}

				private static void myHashMap(){
					HashMap<Integer,String> map = new HashMap<>();
					Integer key = new Integer(1);
					String value = "HashMap";

					map.put(key,value);
					System.out.println(map);

					key = null;
					System.out.println(map);

					System.gc();
					System.out.println(map);
				}

				private static void myWeakHashMap(){
					WeakHashMap<Integer,String> map = new WeakHashMap<>();
					Integer key = new Integer(2);
					String value = "WeakHashMap";

					map.put(key,value);
					System.out.println(map);

					key = null;//key 不能正常使用了
					System.out.println(map);

					System.gc();
					System.out.println(map);
				}
			}
			用于高速缓存和对内存敏感的程序

	13.4、虚引用 PhantomReference [ˈfæntəm]

		需要java.lang.refPhantonReference类来实现。形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和
		没有任何引用一样，在任何时候都可能被垃圾回收器回收，它不能单独使用也不能通过它访问对象，虚引用必须和队列（ReferenceQueue）联合使用。虚引用的主要作用
		是跟踪对象被垃圾回收的状态。仅仅是提供了一种确保对象被finalize以后，做某些事情的机制。

		设置虚引用关联的唯一目的，就是在这个对象被收集器回收的时候收到一个系统通知或者后续添加进一步的处理。Java技术允许使用finalize（）方法在垃圾收集器将对象
		从内存中清楚之前做必要的清理工作。

		 public static void test1(){
				Object obj = new Object();
				ReferenceQueue<Object> queue = new ReferenceQueue<>();
				PhantomReference<Object> objectPhantomReference = new PhantomReference<>(obj,queue);

				System.out.println(obj);
				System.out.println(queue.poll());
				System.out.println(objectPhantomReference.get());
				System.out.println("=======================");
				obj=null;

				System.gc();
				try {
					TimeUnit.SECONDS.sleep(1);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				System.out.println(obj);
				System.out.println(queue.poll());//回收后obj被加入队列queue
				System.out.println(objectPhantomReference.get());//get 方法在引用前后都是null
			}

14、OOM

	Exception是程序正常运行过程中，可以预料的意外情况，可能并且应该被捕获，并进行处理。Error正常情况下不大可能出现的情况，绝大部分的Error都会导致程序状态不
	正常，不可恢复，既然是非正常情况，所以不便也不需要处理，例如OutOfMemoryError之类都是Error的子类

	14.1、java.lang.StackOverFlowError--->error		递归调用，栈溢出

	14.2、java.lang.OutOfMemoryError:Java heap space	堆内存不足，创建对象过多

	14.3、java.lang.OutOfMemoryError:GC overhead limit exceeded  事半功倍

		GC回收时间长时会抛出OutOfMemoryError。过长的定义是，超过98%的时间用来做GC并且回收了不到2%的堆内存，连续多次GC都只回收了不到2%的极端情况下才会抛出。

	14.4、java.lang.OutOfMemoryError:Direct buffer memory	Nio 引起直接内存不足

	14.5、java.lang.OutOfMemoryError:unbale to create new native thread

		导致原因：
			应用创建了太对线程，一个应用进程创建多个线程，超过系统承载极限。服务器并不允许应用程序创建那么多线程，linux系统默认允许单个进程可以创建的线程
			数是1024个，如果应用创建超过这个数量，就会报java.lang.OutOfMemoryError:unable to create new native thread

		解决办法：
			想办法降低应用程序创建线程的数量，分析应用是否真的需要创建那么多线程，如果不是，改代码将线程数降到最低。
			对于有的应用，确实需要创建多个线程，远超过linux系统默认的1024个线程的限制，可以通过修改linux服务器配置，扩大linux默认限制。

		同一个线程，启动两次，报状态不合法。

		14.5.1、非root用户登录linux系统测试
			查看最大线程数量命令：ulimit -u

		14.5.2、服务器级别调参调优
			扩大服务器线程数：
			vim/etc/security/limits.d/90-nproc.conf

	14.6、java.langOutOfMemoryError:Metaspace

		Java8之后的版本使用Metaspace来替代永久代Metaspace是方法区在HotSpot中的实现，它与持久带最大的区别在于：Metaspace并不在虚拟机内存中而是使用本地内存，
		也即在java8中，class metaspace（the virtual machines internal presentation of java class） ,被存储在叫做Metaspace的native memory永久代（Metaspace）
		存放以下信息：* 虚拟机加载的类信息* 常量池* 静态变量* 即时编译后的代码

		enhancer	英[ɪnˈhænsər]

15、GC回收算法和垃圾收集器

		15.1、GC算法

			GC算法（引用计数/复制/标清/标整）

			GC算法		优点				缺点				存活对象移动	内存碎片	适用场景
			引用计数	实现简单			不能处理循环引用	 	 
			标记清除	不需要额外空间		两次扫描，耗时严重	N		Y		老年代
			复制		没有标记和清除			需要额外空间			Y		N		新生代
			标记整理	没有内存碎片		需要移动对象的成本	Y		N		老年代

		15.2、垃圾收集器

			1、串行垃圾回收器（Serial）
				它为单线程环境设计且只使用一个线程进行垃圾回收，会暂停所有的用户线程。所以不适合服务器环境。

			2、ParNew 并行收集器
				是Serial收集器的多线程版本,使用多条线程进行GC

			3、Parallel Scavenge垃圾收集器因为与吞吐量关系密切，也称为吞吐量收集器（Throughput Collector）。
				、有一些特点与ParNew收集器相似
			  （A）、新生代收集器；
			      采用复制算法；
			      多线程收集；
			 （B）、主要特点是：它的关注点与其他收集器不同
			      CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间；
			      而Parallel Scavenge收集器的目标则是达一个可控制的吞吐量（Throughput）；
			      关于吞吐量与收集器关注点说明详见本节后面；

			4、Serial Old
				Serial收集器的老年代版本，同样是单线程收集器

			5、Parallel Old
				Parallel Scavenge收集器的老年代版本

			6、并发垃圾回收器（CMS）
				用户线程和垃圾收集线程同时执行（不一定是并行，可能交替执行），不需要停顿用户线程，使用对响应时间有要求的场景。互联网公司使用
				1、四步过程：

					1、初始标记（CMS initial mark）
						只是标记一下GC Roots能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。

					2、并发标记（CMS concurrent mark）和用户线程一起
						进行GC Roots跟踪的过程，和用户线程一起工作，不需要暂停工作线程。主要标记过程，标记全部对象。

					3、重新标记（CMS remark）
						为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。

					4、并发清除（CMS concurrent sweep）和用户线程一起
						清楚GC Roots不可达对象，和用户线程一起工作，不需要暂停工作线程。基于标记结果，直接清理对象。

				2、优缺点
					1、优点：并发收集低停顿
					2、缺点：并发执行，对CPU资源压力大
							采用的标记清除算法会导致大量碎片


				由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看CMS收集器的内存回收和用户线程是一起并发执行





				由于并发标记时，用户线程依然运行，因此在正式清理前，再做修正。

			7、GI垃圾回收器
				G1垃圾回收器将堆内存分割成不同的区域然后并发的对其进行垃圾回收。Java9默认回收器
				G1（Garbage-First）收集器，是一款面向服务端应用的收集器，应用在多处理器和大容量内存环境中，在实现高吞吐量的同时，尽可能的满足垃圾收集暂停时
				间的要求。另外还具有一下特性：

					像CMS收集器一样，能与应用程序线程并发执行。
					整理空间空间更快
					需要更多的时间来预测GC停顿时间
					不希望牺牲大量的吞吐性能
					不需要更大的Java Heap

					G1收集器的设计目标是取代CMS收集器，它同CMS相比，在以下方面表现的更出色：
					G1是一个有整理内存过程的垃圾收集器，不会产生很多内存碎片。
					G1的Stop The World（STW）更可控，G1在停顿时间上添加了预测机制，用户可以指定期望停顿时间。

				15.3.6.4、底层原理
					1、Region区域化垃圾收集器

					最大的好处是化整为零，避免全内存扫描，只需要按照区域来进行扫描即可。

					区域化内存划片Region，整体编为一系列不连续的内存区域，避免了全内存的GC操作。

					核心思想是将整个堆内存区域分成大小相同的子区域（Region），在JVM启动时会自动设置这些子区域的大小。

					在堆的使用上，G1并不要求对象的存储一定是物理上连续的只要逻辑上连续即可，每个分区也不会固定地为某个代服务，可以按需在年轻代和老年代之间切
					换。启动时可以通过参数-XX:G1HeapRegionSize=n可指定分区大小（1MB-32MB，且必须是2的幂），默认将整个堆划分为2048个分区。
					大小范围在1MB-32MB，最多能设置2048个区域。也即能够支持的最大内存为：32MB*2048=65536MB=64G内存。

					G1将新生代、老年代的物理空间取消了。
					G1算法将堆划分为若干个区域（Region），它仍然属于分代收集器

					这些Region的一部分包含新生代，新生代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间。

					这些Region的一部分包含老年代，G1收集器通过将对象从一个区域复制到另一个区域，完成了清理工作。这就意味着，在正常的处理过程中，G1完成了堆的
					压缩（至少是部分堆的压缩），这样也就不会有CMS内存碎片问题的存在了。

					在G1中，还有一种特殊的区域，叫Humongous（[hjuːˈmʌŋɡəs] 巨大的）区域。如果一个对象占用的空间超过了分区容量的50%以上，G1收集器就认为这是一个
					巨型对象。这些巨型对象默认直接会被分配在老年代，但是如果它是一个短期存在的巨型对象，就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了
					一个Humongous区，它用来专门存放巨型对象。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区，有时候不得不启动
					Full GC。

				15.3.6.5 和CMS相比的优势

					两个优势：
					1、G1不会产生内存碎片
					2、是可以精确控制停顿。该收集器是把整个堆（新生代、老生代）划分成多个固定大小的区域，每次根据允许停顿时间去手机垃圾最多的区域

github的高级操作

		1、in关键字限制搜索范围 SpringBoot in: name,description,readme

		2、stars或fork数量关键词去查找 springboot stars:>=5000/ springcloud forks:>500/springboot forks:100..200 stars:80..100

		3、awesome加强搜索  awesome redis

		4、高亮显示某一行代码   1行地址后面紧跟#L数字/多行地址后面紧跟#L数字-L数字2

		5、项目内搜索 在工程目录下按下字母t，以列表的形式展开项目的内容

		6、搜索某个地区内的大佬 location：beijing language：java

生产环境出现CPU占用过高,分析思路和定位

		1、先用top命令找出CPU占比最高的    --> top | grep xxx  显示xxx进程资源占用信息

		2、ps -ef或者jps进一步定位，得知是一个怎么样的一个后台程序惹事,获取pid -->ps -ef |grep 12192| grep -v grep

		3、定位到具体线程或者代码,获取tid  ps -mp进程 -o THREAD,tid,time

		4、将需要的线程ID转换为16进制格式（英文小写格式）printf "%x\n"有问题的线程ID

		5、jstack进程ID | grep（16进制线程ID小写英文） -A60
